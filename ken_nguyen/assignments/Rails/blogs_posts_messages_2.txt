#blogs_posts_messages_2

rails new blogs_posts_messages_2

#in gemfile
	gem 'hirb'


#Create appropriate models
	rails g model User first_name:string last_name:string email_address:string
	rails g model Blog name:string description:string 
	rails g model Owner user:references blog:references
	rails g model Post blog:references user:references title:string content:text
	rails g model Message post:references user:references author:string message:text

	rake db:migrate


#Create appropriate validations (think about what fields you would need to require, what other validation rules you would need)
	#on the User.rb model
		class User < ActiveRecord::Base
			has_many :posts, dependent: :destroy
			has_many :owners, dependent: :destroy
			has_many :messages, dependent: :destroy
			has_many :blogs, through: :owners
		    has_many :post_messages, through: :posts, source: :messages

			validates :first_name, :last_name, :email_address, presence: true, length: { minimum: 2 }
		end



	#on the Owner.rb model
		class Owner < ActiveRecord::Base
		  belongs_to :user
		  belongs_to :blog
		end

	#on Blog.rb model
		class Blog < ActiveRecord::Base
			has_many :owners, dependent: :destroy
			has_many :posts, dependent: :destroy
			
			has_many :users, through: :owners
			has_many :messages, through: :posts

			validates :name, :description, presence: true
		end


	#on Post.rb model
		class Post < ActiveRecord::Base
		  belongs_to :blog
		  belongs_to :user
		  has_many :messages

		  validates :title, :content, presence: true
		end

	#on Message.rb model
		class Message < ActiveRecord::Base
		  belongs_to :post
		  belongs_to :user

		  validates :author, :message, presence: true
		end


Using the console

#Create 5 users

	rails c
	Hirb.enable

	for i in 1..5
		User.create(first_name:"User#{i}", last_name:"LN_#{i}", email_address:"email_#{i}")
	end


#Create 5 blogs

	for i in 1..5
		Blog.create(name:"Blog#{i}", description:"text_#{i}")
	end

#Have the first 3 blogs be owned by the first user

	for i in 1..3
		Owner.create(user:User.first, blog:Blog.find(i))
	end

#Have the 4th blog you create be owned by the second user
	
	Owner.create(user:User.second, blog:Blog.find(4))

#Have the 5th blog you create be owned by the last user

	Owner.create(user:User.last, blog:Blog.find(5))

#Have the third user own all of the blogs that were created.

	for i in 1..Blog.all.size
		Owner.create(user:User.find(3), blog:Blog.find(i))
	end

#Have the first user create 3 posts for the blog with an id of 2. Remember that you shouldn't do Post.create(user: User.first, blog_id: 2) but more like Post.create(user: User.first, blog: Blog.find(2)). Again, you should never reference the foreign key in Rails.

	for i in 1..3
		Post.create(blog:Blog.find(2), user:User.first, title:"PostA#{i}", content:"TextA#{i}")
	end

#Have the second user create 5 posts for the last Blog.

	for i in 1..5
		Post.create(blog:Blog.last, user:User.second, title:"PostB#{i}", content:"TextB#{i}")
	end


#Have the 3rd user create several posts for different blogs.

	for i in 1..3
		Post.create(blog:Blog.find(i+1), user:User.find(3), title:"PostC#{i}", content:"TextC#{i}")
	end


#Have the 3rd user create 2 messages for the first post created and 3 messages for the second post created

	for i in 1..2 
		Message.create(post:Post.where(user_id: 3).first, user:User.find(3), author:"User 3", message:"Text-3-A-#{i}")
	end

	for i in 1..3
		Message.create(post:Post.where(user_id: 3).second, user:User.find(3), author:"User 3", message:"Text-3-B-#{i}")
	end

#Have the 4th user create 3 messages for the last post you created.

	for i in 1..3
		Message.create(post:Post.where(user_id: 3).last, user:User.find(4), author:"User 4", message:"Text-4-A-#{i}")
	end

#Change the owner of the 2nd post to the last user.

	Post.second.update(:user => User.last)
	or
	Post.second.update(user:User.last)

#Change the 2nd post's content to be something else.

	Post.second.update(content:"Something Else")

#Retrieve all blogs owned by the 3rd user (make this work by simply doing: User.find(3).blogs).

	User.find(3).blogs

	#in the User.rb model
		has_many :blogs, through: :owners

	#in the Blog.rb model
		has_many :users, through: :owners

#Retrieve all posts that were created by the 3rd user

	User.find(3).posts

#Retrieve all messages left by the 3rd user

	User.find(3).messages

#Retrieve all posts associated with the first blog as well as who left these posts.  

	Blog.first.posts
		(The column user_id references the user who wrote the post)

	posts = Blog.first.posts
	for post in posts
		User.find(post[:user_id])  

		//this works if i manually type it, but for some reason it doesnt bring up the user records in the console in the loop? did not work(yet)
	end


	another way(correct way):
	Blog.second.posts.select("*").joins(:user)



#Retrieve all messages associated with the first blog along with all the user information of those who left the messages.
	
	#my first blog has no messages

	Blog.second.messages.select("*").joins(:user)

#Grab all user information of those that own the first blog (make this work by allowing Blog.first.owners to work).

	Blog.second.users

	#in Blog.rb model
		has_many :users, through: :owners

	#in Owner.rb model
		class Owner < ActiveRecord::Base
		  belongs_to :user
		  belongs_to :blog
		end


#Change it so that the first blog is no longer owned by the first user.
	
	Owner.where(user:User.first, blog:Blog.first).destroy_all